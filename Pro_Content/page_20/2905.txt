<html><head><meta http-equiv="Pragma" content="no-cache"><meta http-equiv="Content-Type" content="text/html; charset=utf-8"><meta http-equiv="Content-Language" content="en-US"><title>2905 -- Parallel Computer Simulator</title><link rel=stylesheet href='poj.css' type='text/css'><link rel='shortcut icon' href='poj.ico'><link rel='icon' href='poj.gif' type='image/gif'><script src='poj.js' language='javascript'></script></head><body lang="en-US" leftmargin=5 link=blue alink=blue vlink=blue onkeydown=KeyDown(event)><a name=top></a><TABLE style='BORDER-COLLAPSE: collapse' borderColor=#ffffff width=100% border=1><TBODY><TR><TD align=CENTER colSpan=5><table class=h1 cellpadding=0><tr><td width=25% align=left><img src='images/logo1.jpg' height=100 border=0></td><td colspan=3 bgcolor='#EAEFFD'><table class=h2><tr><td><img border=0 src='images/logo0.gif' width=450 height=90></td><td width=95><img border=0 src='images/logo3.gif' width=95 height=95></td></tr></table></td></tr></table></TD></TR><TR vAlign=top align=CENTER bgColor=#6589d1><TH class=h>Online Judge</TH><TH class=h>Problem Set</TH><TH class=h>Authors</TH><TH class=h>Online Contests</TH><TH class=h>User</TH></TR><TR vAlign=top align=CENTER bgColor='#f1f1fd'><TD class='h' onMouseOver='scbg(this, 1)' onMouseOut='scbg(this, 0)'><A href='bbs'>Web Board</A><BR><A href='./'>Home Page</A><BR><A href='page?id=1000' target=_blank>F.A.Qs</A><BR><a href='chart'>Statistical Charts</a></TD><TD class='h' onMouseOver='scbg(this, 1)' onMouseOut='scbg(this, 0)'><FORM action=gotoproblem method=get><A href='problemlist'>Problems</A><BR><A href='submit'>Submit Problem</A><BR><A href='status'>Online Status</A><BR><font color=blue>Prob.ID:</font><input type=text name=pid size=6><input type=Submit value=Go name=pb1></form></td><TD class='h' onMouseOver='scbg(this,1)' onMouseOut='scbg(this,0)'><form method=GET action=searchuser><a href=register>Register</a><br><a href=modifyuser>Update your info</a><br><a href=userlist>Authors ranklist</a><br><input type=text name=key size=10><input type=Submit value=Search name=B1></form></TD>
<TD class=h onMouseOver='scbg(this,1)' onMouseOut='scbg(this,0)'><font color=#1a5cc8>Current Contest</font><br><a href=pastcontests>Past Contests</a><br><a href=contests>Scheduled Contests</a><br><a href=challenge.html target=_blank><font color=red>Award Contest</font></a></td><TD align=left class=h onMouseOver='scbg(this,1)' onMouseOut='scbg(this,0)'><form method=POST action=login><table><tr><td>User ID:</td><td><input type=text name=user_id1 size=10 style='font-family:monospace'></td></tr><tr><td>Password:</td><td><input type=password name=password1 size=10 style='font-family:monospace'></td></tr></table><input type=Submit value=login name=B1>&nbsp;&nbsp;<a href=register target=_parent>Register</a><input type=hidden name=url value=/problem?id=2905></form></td></TR></TABLE><table border=0 width=100% background=images/table_back.jpg><tr><td>
<div style='position: absolute; right: 10px;'>Language:<select size=1 onChange="window.location.href='problem?id=2905&lang='+this.value+'&change=true'"><option value='default' selected>Default</option></select></div><div class="ptt" lang="en-US">Parallel Computer Simulator</div>
<div class="plm"><table align="center"><tr><td><b>Time Limit:</b> 1000MS</td><td width="10px"></td><td><b>Memory Limit:</b> 65536K</td></tr><tr><td><b>Total Submissions:</b> 228</td><td width="10px"></td><td><b>Accepted:</b> 56</td></table></div><p class="pst">Description</p><div class="ptx" lang="en-US"><span lang="en-us"><p>Programs executed concurrently on a uniprocessor system appear to be executed at the same time, but in reality the single CPU alternates between the programs, executing some number of instructions from each program before switching to the next. You are to simulate the concurrent execution of up to ten programs on such a system and determine the output that they will produce.</p><p>The program that is currently being executed is said to be <b>running</b>, while all programs awaiting execution are said to be <b>ready</b>. A program consists of a sequence of no more than 200 statements, one per line, followed by an <tt>end</tt> statement. The statements available are listed below.</p><div align="center"><table rules="groups" frame="void"><thead><tr><th>Statement type</th><th>Syntax</th></tr></thead><tbody><tr><td align="center">Assignment</td><td align="center">&lsaquo;<i>variable</i>&rsaquo; = &lsaquo;<i>constant</i>&rsaquo;</td></tr><tr><td align="center">Output</td><td align="center"><tt>print</tt> &lsaquo;<i>variable</i>&rsaquo;</td></tr><tr><td align="center">Begin mutual exclusion</td><td align="center"><tt>look</tt></td></tr><tr><td align="center">End mutual exclusion</td><td align="center"><tt>unlock</tt></td></tr><tr><td align="center">Stop execution</td><td align="center"><tt>end</tt></td></tr></tbody></table></div><p>A &lsaquo;<i>variable</i>&rsaquo; is any single lowercase alphabetic character and a &lsaquo;<i>constant</i>&rsaquo; is an unsigned decimal number less than 1000. There are only 26 variables in the computer system, and they are shared among the programs. Thus assignments to a variable in one program affect the value that might be printed by a different program. All variables are initially set to zero.</p><p>Each statement requires an integral number of time units to execute. The running program is permitted to continue executing instructions for a period of time called its <b>quantum</b>. When a program&rsquo;s time quantum expires, another ready program will be selected to run. Any instruction currently being executed when the time quantum expires will be allowed to complete.</p><p>Programs are queued first-in-first-out for execution in a <b>ready queue</b>. The initial order of the ready queue corresponds to the original order of the programs in the input file. This order can change, however, as a result of the execution of <tt>lock</tt> and <tt>unlock</tt> statements.</p><p>The <tt>lock</tt> and <tt>unlock</tt> statements are used whenever a program wishes to claim mutually exclusive access to the variables it is manipulating. These 3 statements always occur in pairs, bracketing one ormore other statements. A <tt>lock</tt> will always precede an <tt>unlock</tt>, and these statements will never be nested. Once a program successfully executes a <tt>lock</tt> statement, no other program may successfully execute a <tt>lock</tt> statement until the locking program runs and executes the corresponding <tt>unlock</tt> statement. Should a running program attempt to execute a <tt>lock</tt> while one is already in effect, this program will be placed at the end of the <b>blocked queue</b>. Programs blocked in this fashion lose any of their current time quantum remaining. When an <tt>unlock</tt> is executed, any program at the head of the blocked queue is moved to the head of the ready queue. The first statement this program will execute when it runs will be the <tt>lock</tt> statement that previously failed. Note that it is up to the programs involved to enforce themutual exclusion protocol through correct usage of <tt>lock</tt> and <tt>unlock</tt> statements. (A renegade program with no <tt>lock</tt>/<tt>unlock</tt> pair could alter any variables it wished, despite the proper use of <tt>lock</tt>/<tt>unlock</tt> by the other programs.)</p></span></div><p class="pst">Input</p><div class="ptx" lang="en-US"><p>The first line of the input file consists of seven integers separated by spaces. These integers specify (in order): the number of programs which follow, the unit execution times for each of the five statements (in the order given above), and the number of time units comprising the time quantum. The remainder of the input consists of the programs, which are correctly formed from statements according to the rules described above.</p><p>All program statements begin in the first column of a line. Blanks appearing in a statement should be ignored. Associated with each program is an identification number based upon its location in the input data (the first program has ID=1, the second has ID=2, etc.).</p></div><p class="pst">Output</p><div class="ptx" lang="en-US"><p>Your output will contain the output generated by the print statements as they occur during the simulation. When a print statement is executed, your program should display the program ID, a colon, a space, and the value of the selected variable. Output from separate print statements should appear on separate lines. A sample input and correct output is shown below.</p></div><p class="pst">Sample Input</p><pre class="sio">3 1 1 1 1 1 1
a = 4
print a
lock
b = 9
print b
unlock
print b
end
a = 3
print a
lock
b = 8
print b
unlock
print b
end
b = 5
a=17
print a
print b
lock
b = 21
print b
unlock
print b
end</pre><p class="pst">Sample Output</p><pre class="sio">1: 3
2: 3
3: 17
3: 9
1: 9
1: 9
2: 8
2: 8
3: 21
3: 21</pre><p class="pst">Source</p><div class="ptx" lang="en-US"><a href="searchproblem?field=source&key=Svenskt+M%C3%A4sterskap+i+Programmering%2FNorgesmesterskapet+2002">Svenskt MÃ¤sterskap i Programmering/Norgesmesterskapet 2002</a></div></td></tr></table>
<font color=#333399 size=3><p align="center">
[<a href="submit?problem_id=2905">Submit</a>]&nbsp;&nbsp;
 [<a href="javascript:history.go(-1)">Go Back</a>]&nbsp;&nbsp; [<a href=problemstatus?problem_id=2905>Status</a>]&nbsp;&nbsp; 
[<a href="bbs?problem_id=2905">Discuss</a>]
</font></p>
<p><img height=30 src=images/home.gif width=40 border=0><font size=3><a href=.>Home Page</a> </font>&nbsp;&nbsp;<img height=30 src='images/goback.gif' width=40 border=0><font size=3><a href='javascript:history.go(-1)'>Go Back</a>&nbsp;&nbsp;<img height=30 width=40 border=0 src='images/top.gif'><a href=#top>To top</a></font><br><hr><P align=center style='font-family:Arial, Helvetica, sans-serif'>All Rights Reserved 2003-2013 Ying Fuchen,Xu Pengcheng,Xie Di<br>Any problem, Please <a href=mailto:webmaster@poj.org>Contact Administrator</a></p><script type="text/javascript"> var _gaq = _gaq || []; _gaq.push(['_setAccount', 'UA-790353-1']); _gaq.push(['_trackPageview']); (function() { var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true; ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js'; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s); })(); </script></body></html>
